// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        Int      @id @default(autoincrement())
  clerkUserId  String  @unique
  name      String
  email     String   @unique
  starSign  StarSign @relation(fields: [starSignId], references: [id])
  starSignId Int
  matches   User[]   @relation(name: "UserMatches")
  matchedBy User[]   @relation(name: "UserMatches")
  birthChart   BirthChart?
  consultations Consultation[]
  fengShuiReadings FengShuiReading[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model CompatibilityCalculation {
  id                       Int      @id @default(autoincrement())
  birthDateA               DateTime
  birthTimeA               DateTime
  birthDateB               DateTime
  birthTimeB               DateTime
  score                    Float
  analysis1                String
  analysis2                String
  compatibilityAnalysis    String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@index([birthDateA, birthTimeA, birthDateB, birthTimeB], name: "unique_birth_dates")

}

model StarSign {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}


model Element {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  birthCharts  BirthChart[]
}

model BirthChart {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  birthDate   DateTime
  birthTime   DateTime
  birthPlace  String
  ascendant   String
  sunSign     String
  moonSign    String
  elements    Element[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model FengShuiReading {
  id           Int      @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id])
  userId       Int
  readingDate  DateTime
  propertyType String
  direction    String
  analysis     String
  recommendations String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Consultation {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  date         DateTime
  topic        String
  notes        String
  recommendations String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Test {
  id          String     @id @default(cuid())
  title       String
  description String
  questions   Question[]
}

model Question {
  id           String   @id @default(cuid())
  question     String
  type         String
  category     String
  instructions String
  testId       String
  test         Test     @relation(fields: [testId], references: [id])
  options      Option[]
}

model Option {
  id         String   @id @default(cuid())
  text       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
}
